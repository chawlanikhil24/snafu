#!/usr/bin/env python
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

import elasticsearch
import os
import sys
import json
import traceback


# The purpose of this function is to consolidate all result jsons in to 1 list
def _load_result_json(smallfile_path, operations):
    results = []
    for operation in operations:
        # smallfile results are stored in directory, {{smallfile_path}}/RESULTS
        # naming convention for result JSON is: SMALLFILE_$operation_RUN_RESULT
        _path = smallfile_path+"/RESULTS/SMALLFILE_"+operation+"_RUN_RESULT"
        with open(_path) as json_file:
            data = json.load(json_file)
            results.append(data)
    return results


# The purpose of this function is to establish connection with
# elasticsearch server and index the consolidated results 1 by 1
def _index_result(server, port, payload):
    index = "smallfile-results"
    try:
        es = elasticsearch.Elasticsearch([
            {'host': server, 'port': port}], send_get_body_as='POST')
        for result in payload:
            es.index(index=index, doc_type="result", body=result)
        return True
    except Exception as e:
        print("******Exception Occured*******")
        print(str(e))
        print(traceback.format_exc())
        return False


# The pupose of this function is to inject the uuid and user into
# the data generated by smallfile.
def _json_payload(data, uuid, user):
    processed = []
    for item in data:
        item["workload"] = "smallfile"
        item["uuid"] = uuid
        item["user"] = user
        processed.append(item)
    return processed


def main():

    # retrieving elasticsearch server address and operating port from
    # environement variables. The credentials are exported in the
    # tasks of ripsaw/roles/smallfile-bench. These variables are exported
    # based on condition, if the es_port and es_server is defined in
    # smallfile CRDS of ripsaw. Use of "os.environ.get($env_var)" is to look
    # for the supplied $env_var. If there is no such $env_var defined,
    # then it will return None object.
    server = os.environ.get("es")
    # Use of "os.environ.get($env_var)" is to look
    # for the supplied $env_var. If there is no such $env_var defined,
    # then it will return None object.
    port = os.environ.get("es_port")
    # for each benchmark run, ripsaw generates a UUID and export it
    # as a environement variable. Here, that uuid and a test_user is
    # is trying to be fetched from env. Use of "os.environ.get($env_var)"
    # is to look for the supplied $env_var. If there is no such $env_var
    # defined, then it will return None object.
    uuid = os.environ.get("uuid")
    user = os.environ.get("test_user")

    # Smallfile results path is based on the run, if it is executed on
    # pv or without PV. Hence, {{smallfile_path}} is supplied at stdin
    # to determine the RESULTS directory
    smallfile_path = sys.argv[1]
    # The number of result JSON files depends on the number of operations
    # executed by smallfile. Sequence of operations is supplied through
    # smallfile CRD in ripsaw
    operations = sys.argv[2:]

    # Consolidating all the JSONs in to 1 list here. "data" is
    # final list which has all the smallfile results. The format is
    # [{smallfile_result_1},{smallfile_result_2},{smallfile_result_3}]
    data = _load_result_json(smallfile_path, operations)
    # Now, smallfile results are available in python memory, before
    # passing this data to Elasticsearch, it has to be injected
    # with the $uuid and $user, so as to make the result, easily
    # and uniquely identifiable on Elasticsearch. If $uuid and $user
    # is not fetched from env, the script will end here.
    if (uuid is not None) and (user is not None):
        documents = _json_payload(data, uuid, user)
        # By reaching here, means the $uuid and $user has been successfully
        # retrieved and injected in each piece of smallfile result. Now, data
        # is all set to send to elasticsearch server. Checking for ES
        # server and port address here. If available, _index_result() will s
        # establish connection to ES server and send data, by iterating through
        # each smallfile result in the "documents" list.
        if (server is not None) and (port is not None):
            if len(documents) > 0:
                status = _index_result(server, port, documents)
                if status:
                    print("Results successfully indexed into ES")


if __name__ == '__main__':
    sys.exit(main())
